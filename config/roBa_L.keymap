#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 4
#define SCROLL 5
#define NUM 3

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <11 10>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 22>;
        };

        cavve {
            bindings = <&cavve>;
            key-positions = <12 13>;
        };

        cz {
            bindings = <&kp LC(Z)>;
            key-positions = <1 2>;
        };

        cy {
            bindings = <&kp LC(Y)>;
            key-positions = <3 2>;
        };

        gyoutyousei {
            bindings = <&gyoutyousei>;
            key-positions = <25 26>;
        };

        gyousyoukyo {
            bindings = <&gyousyoukyo>;
            key-positions = <3 4>;
        };

        altvector {
            bindings = <&kp LA(DOWN_ARROW)>;
            key-positions = <13 14>;
        };

        app_togl_R {
            bindings = <&kp LC(LA(TAB))>;
            key-positions = <8 7>;
        };

        f2 {
            bindings = <&kp F2>;
            key-positions = <19 20>;
        };

        screensnap {
            bindings = <&kp LS(LG(S))>;
            key-positions = <17 18>;
        };

        app_togl_L {
            bindings = <&kp LC(LA(LS(TAB)))>;
            key-positions = <7 6>;
        };

        textshot {
            bindings = <&kp LS(LC(C))>;
            key-positions = <29 30>;
        };

        shft_ctrl {
            bindings = <&kp LS(LCTRL)>;
            key-positions = <19 18>;
        };

        tab_change_L {
            bindings = <&kp LC(PG_UP)>;
            key-positions = <24 23>;
        };

        tab_change_R {
            bindings = <&kp LC(PAGE_DOWN)>;
            key-positions = <24 25>;
        };

        winL {
            bindings = <&kp LG(LEFT_ARROW)>;
            key-positions = <31 30>;
        };

        winR {
            bindings = <&kp LG(RIGHT_ARROW)>;
            key-positions = <31 32>;
        };

        win_up {
            bindings = <&kp LG(UP_ARROW)>;
            key-positions = <18 19 20>;
        };

        win_dw {
            bindings = <&kp LG(DOWN_ARROW)>;
            key-positions = <30 31 32>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        cavve: cavve {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(V)) &kp V &kp ENTER>;
            label = "CAVVE";
        };

        gyoutyousei: gyoutyousei {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LEFT_ALT &kp H &kp O &kp I>;
            label = "GYOUTYOUSEI";
        };

        gyousyoukyo: gyousyoukyo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp D &kp R>;
            label = "GYOUSYOUKYO";
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET>;
            label = "BRACKETS";
        };

        curlybrackets: curlybrackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACE>;
            label = "CURLYBRACKETS";
        };

        new_macro: new_macro {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        eager_tap_dance: eager_tap_dance {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML &macro_param_2to1 &sl_250 MACRO_PLACEHOLDER>;

            label = "eager_tap_dance";
        };

    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt_to_layer_0_CTRL: lt_to_layer_0_CTRL {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0_CTRL";
            bindings = <&kp>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: scroll_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
            label = "scroll_up_down";
        };

        scroll_right_left: scroll_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
            label = "scroll_right_left";
        };

        sl_250: sl_250 {
            compatible = "zmk,behavior-sticky-key";
            label = "SL_250";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <250>;
        };

        custom_tap_dance: custom_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <2>;
            bindings = <
                &macro_press_release &kp C &kp LC(C)  // シングルタップ: CTRL+C
                &macro_press_release &kp V &kp LC(V)  // ダブルタップ: CTRL+V
                &macro_press_release &macro CAVVE     // トリプルタップ: CAVVEマクロ
            >;
            label = "custom_tap_dance";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W                      &kp E                      &kp R                          &kp T                                                                &kp Y        &kp U  &kp I      &kp O    &kp P
&lt 6 A           &kp S                      &kp D                      &kp F                          &kp G            &kp LC(W)                        &kp LA(F4)         &kp H        &kp J  &kp K      &kp L    &lt 5 MINUS
&mt LEFT_SHIFT Z  &kp X                      &kp C                      &kp V                          &lt 6 B          &kp LEFT_ARROW                   &lt 1 RIGHT_ARROW  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp APOSTROPHE    &mt LEFT_WIN LS(NUMBER_8)  &mt LEFT_ALT LS(NUMBER_9)  &custom_tap_dance              &mt LCTRL SPACE  &eager_tap_dance LANGUAGE_2 1    &kp BACKSPACE      &lt 3 ENTER                             &kp DELETE
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                     &trans   &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                             &trans   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                             &trans   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &eager_tap_dance LANGUAGE_1 1      &kp DEL  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp DOWN_ARROW UP_ARROW>;
        };

        sub1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        num {
            bindings = <
&kp LS(NUMBER_1)      &kp LS(NUMBER_2)       &kp LS(NUMBER_3)  &kp LS(NUMBER_4)                  &kp LS(N5)                                                              &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_SUBTRACT
&kp LS(NUMBER_6)      &kp LS(NUMBER_7)       &kp EQUAL         &kp LS(EQUAL)                     &kp LEFT_BRACKET         &trans                             &trans      &kp KP_MULTIPLY  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS
&kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &kp F24           &kp LS(MINUS)                     &kp LS(INTERNATIONAL_1)  &trans                             &trans      &trans           &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans
&kp SEMICOLON         &kp RIGHT_BRACKET      &kp F23           &lt_to_layer_0 3 INTERNATIONAL_4  &trans                   &lt_to_layer_0 1 INT_MUHENKAN      &kp KP_DOT  &kp KP_NUMBER_0                                                     &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(LA(TAB)) LC(LA(LS(TAB)))>;
        };

        MOUSE {
            bindings = <
&trans  &to_layer_0 W  &to_layer_0 E  &to_layer_0 R                     &trans                                             &trans  &trans    &trans    &trans    &trans
&trans  &trans         &trans         &trans                            &trans  &trans                             &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans         &trans         &trans                            &trans  &trans                             &trans  &trans  &mkp MB1  &trans    &trans    &mkp MB4
&trans  &trans         &trans         &lt_to_layer_0 3 INTERNATIONAL_4  &trans  &lt_to_layer_0 1 INT_MUHENKAN      &trans  &trans                                &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        BT {
            bindings = <
&trans  &trans        &trans        &trans        &trans                                                       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans                      &trans                   &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &kp LC(LG(LEFT_ARROW))      &kp LC(LG(RIGHT_ARROW))  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans                      &trans                   &trans                                                  &bt BT_CLR_ALL
            >;

            sensor-bindings = <&scroll_up_down>;
        };
    };
};
